// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SitesServiceClient is the client API for SitesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SitesServiceClient interface {
	Create(ctx context.Context, in *CreateRequestSite, opts ...grpc.CallOption) (*CreateResponseSite, error)
	Read(ctx context.Context, in *ReadRequestSite, opts ...grpc.CallOption) (*ReadResponseSite, error)
	ReadAll(ctx context.Context, in *ReadAllRequestSite, opts ...grpc.CallOption) (*ReadAllResponseSite, error)
	Update(ctx context.Context, in *UpdateRequestSite, opts ...grpc.CallOption) (*UpdateResponseSite, error)
	Delete(ctx context.Context, in *DeleteRequestSite, opts ...grpc.CallOption) (*DeleteResponseSite, error)
	ReadStatus(ctx context.Context, in *ReadRequestState, opts ...grpc.CallOption) (*StatusResponse, error)
}

type sitesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSitesServiceClient(cc grpc.ClientConnInterface) SitesServiceClient {
	return &sitesServiceClient{cc}
}

func (c *sitesServiceClient) Create(ctx context.Context, in *CreateRequestSite, opts ...grpc.CallOption) (*CreateResponseSite, error) {
	out := new(CreateResponseSite)
	err := c.cc.Invoke(ctx, "/proto.SitesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) Read(ctx context.Context, in *ReadRequestSite, opts ...grpc.CallOption) (*ReadResponseSite, error) {
	out := new(ReadResponseSite)
	err := c.cc.Invoke(ctx, "/proto.SitesService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) ReadAll(ctx context.Context, in *ReadAllRequestSite, opts ...grpc.CallOption) (*ReadAllResponseSite, error) {
	out := new(ReadAllResponseSite)
	err := c.cc.Invoke(ctx, "/proto.SitesService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) Update(ctx context.Context, in *UpdateRequestSite, opts ...grpc.CallOption) (*UpdateResponseSite, error) {
	out := new(UpdateResponseSite)
	err := c.cc.Invoke(ctx, "/proto.SitesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) Delete(ctx context.Context, in *DeleteRequestSite, opts ...grpc.CallOption) (*DeleteResponseSite, error) {
	out := new(DeleteResponseSite)
	err := c.cc.Invoke(ctx, "/proto.SitesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) ReadStatus(ctx context.Context, in *ReadRequestState, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.SitesService/ReadStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SitesServiceServer is the server API for SitesService service.
// All implementations must embed UnimplementedSitesServiceServer
// for forward compatibility
type SitesServiceServer interface {
	Create(context.Context, *CreateRequestSite) (*CreateResponseSite, error)
	Read(context.Context, *ReadRequestSite) (*ReadResponseSite, error)
	ReadAll(context.Context, *ReadAllRequestSite) (*ReadAllResponseSite, error)
	Update(context.Context, *UpdateRequestSite) (*UpdateResponseSite, error)
	Delete(context.Context, *DeleteRequestSite) (*DeleteResponseSite, error)
	ReadStatus(context.Context, *ReadRequestState) (*StatusResponse, error)
	mustEmbedUnimplementedSitesServiceServer()
}

// UnimplementedSitesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSitesServiceServer struct {
}

func (UnimplementedSitesServiceServer) Create(context.Context, *CreateRequestSite) (*CreateResponseSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSitesServiceServer) Read(context.Context, *ReadRequestSite) (*ReadResponseSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSitesServiceServer) ReadAll(context.Context, *ReadAllRequestSite) (*ReadAllResponseSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedSitesServiceServer) Update(context.Context, *UpdateRequestSite) (*UpdateResponseSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSitesServiceServer) Delete(context.Context, *DeleteRequestSite) (*DeleteResponseSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSitesServiceServer) ReadStatus(context.Context, *ReadRequestState) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStatus not implemented")
}
func (UnimplementedSitesServiceServer) mustEmbedUnimplementedSitesServiceServer() {}

// UnsafeSitesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SitesServiceServer will
// result in compilation errors.
type UnsafeSitesServiceServer interface {
	mustEmbedUnimplementedSitesServiceServer()
}

func RegisterSitesServiceServer(s grpc.ServiceRegistrar, srv SitesServiceServer) {
	s.RegisterService(&SitesService_ServiceDesc, srv)
}

func _SitesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SitesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).Create(ctx, req.(*CreateRequestSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequestSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SitesService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).Read(ctx, req.(*ReadRequestSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequestSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SitesService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).ReadAll(ctx, req.(*ReadAllRequestSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequestSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SitesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).Update(ctx, req.(*UpdateRequestSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestSite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SitesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).Delete(ctx, req.(*DeleteRequestSite))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_ReadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequestState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).ReadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SitesService/ReadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).ReadStatus(ctx, req.(*ReadRequestState))
	}
	return interceptor(ctx, in, info, handler)
}

// SitesService_ServiceDesc is the grpc.ServiceDesc for SitesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SitesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SitesService",
	HandlerType: (*SitesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SitesService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SitesService_Read_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _SitesService_ReadAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SitesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SitesService_Delete_Handler,
		},
		{
			MethodName: "ReadStatus",
			Handler:    _SitesService_ReadStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/test.proto",
}
